diff --git a/mysql/driver.c b/mysql/driver.c
index 072d97f..12e1470 100644
--- a/mysql/driver.c
+++ b/mysql/driver.c
@@ -78,6 +78,19 @@ fetch_result(va_list ap)
 	return 0;
 }
 
+extern int luaL_nil_ref;
+
+/**
+ * Push ffi's NULL (cdata<void *>: NULL) onto the stack.
+ * Can be used as replacement of nil in Lua tables.
+ * @param L stack
+ */
+static inline void
+luaL_pushnull(struct lua_State *L)
+{
+	lua_rawgeti(L, LUA_REGISTRYINDEX, luaL_nil_ref);
+}
+
 /**
  * push results to lua stack
  */
@@ -118,39 +131,48 @@ lua_mysql_pushresult(struct lua_State *L, MYSQL *mysql,
 		int i;
 		for (i = 0; i < mysql_num_fields(result); i++) {
 			lua_pushstring(L, fields[i].name);
+			if(row[i]) {
+				switch (fields[i].type) {
+					case MYSQL_TYPE_TINY:
+					case MYSQL_TYPE_SHORT:
+					case MYSQL_TYPE_LONG:
+					case MYSQL_TYPE_FLOAT:
+					case MYSQL_TYPE_INT24:
+					case MYSQL_TYPE_DOUBLE: {
+						lua_pushlstring(L, row[i], len[i]);
+						double v = lua_tonumber(L, -1);
+						lua_pop(L, 1);
+						lua_pushnumber(L, v);
+						break;
+					}
+
+					case MYSQL_TYPE_NULL:
+						luaL_pushnull(L);
+						break;
+
+					case MYSQL_TYPE_LONGLONG: {
+							long long v = atoll(row[i]);
+							if (fields[i].flags & UNSIGNED_FLAG) {
+								luaL_pushuint64(L, v);
+							} else {
+								luaL_pushint64(L, v);
+							}
+							break;
+					}
+
+					/* AS string */
+					case MYSQL_TYPE_NEWDECIMAL:
+					case MYSQL_TYPE_DECIMAL:
+					case MYSQL_TYPE_TIMESTAMP:
+					default:
+						lua_pushlstring(L, row[i], len[i]);
+						break;
 
-			switch(fields[i].type) {
-				case MYSQL_TYPE_TINY:
-				case MYSQL_TYPE_SHORT:
-				case MYSQL_TYPE_LONG:
-				case MYSQL_TYPE_FLOAT:
-				case MYSQL_TYPE_INT24:
-				case MYSQL_TYPE_DOUBLE: {
-					lua_pushlstring(L, row[i], len[i]);
-					double v = lua_tonumber(L, -1);
-					lua_pop(L, 1);
-					lua_pushnumber(L, v);
-					break;
 				}
-
-				case MYSQL_TYPE_NULL:
-					lua_pushnil(L);
-					break;
-
-				case MYSQL_TYPE_LONGLONG:
-				case MYSQL_TYPE_TIMESTAMP: {
-					long long v = atoll(row[i]);
-					luaL_pushuint64(L, v);
-					break;
-				}
-
-				/* AS string */
-				case MYSQL_TYPE_NEWDECIMAL:
-				case MYSQL_TYPE_DECIMAL:
-				default:
-					lua_pushlstring(L, row[i], len[i]);
-					break;
-
+			}
+			else
+			{
+				luaL_pushnull(L);
 			}
 			lua_settable(L, -3);
 		}
diff --git a/mysql/init.lua b/mysql/init.lua
index ffa253e..2f840bd 100644
--- a/mysql/init.lua
+++ b/mysql/init.lua
@@ -49,6 +49,14 @@ local function close(self)
     return self.driver:close()
 end
 
+-- quote string
+local function quote(self, str)
+    if type(str) ~= 'string' then
+        return nil
+    end
+    return self.driver:quote(str)
+end
+
 -- example:
 -- local tuples, arows = db:execute(sql, args)
 --   tuples - a table of tuples (tables)
@@ -118,6 +126,7 @@ conn_mt = {
         begin = begin;
         rollback = rollback;
         commit = commit;
+        quote = quote;
     }
 }
 
